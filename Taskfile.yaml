version: "3.44"

dotenv:
    - .env

vars:
    SOLC_VERSION: v0.8.23

tasks:
    ensure-var:
        silent: true
        vars:
            PNAME: "{{index .CLI_ARGS_LIST 0}}"
            PVAL: "{{index .CLI_ARGS_LIST 1}}"
        cmd: '{{if eq (len .PVAL) 0}}echo ''Required arg "{{.PNAME}}" is not set'';exit 1{{else}}echo {{.PVAL}}{{end}}'

    deps:ts:
        desc: Install TypeScript dependencies
        aliases:
            - install:ts
        sources:
            - package.json
            - bun.lock
        cmd: bun install {{.CLI_ARGS}}

    deps:sol:
        desc: Install Solidity dependencies
        aliases:
            - install:sol
        sources:
            - .gitmodules
        generates:
            - lib/*/**/*
        cmd: forge install --shallow {{.CLI_ARGS}}

    deps:
        desc: Install all (Foundry/TS) dependencies
        aliases:
            - install
        deps:
            - deps:ts
            - deps:sol

    format:ts:
        desc: Run prettier formatter for TypeScript
        aliases:
            - fmt:ts
        cmd: bunx prettier --write .

    format:sol:
        desc: Run foundry formatter for Solidity
        aliases:
            - fmt:sol
        cmd: forge fmt

    format:
        desc: Format all sources (Solidity and TypeScript)
        aliases:
            - fmt
        deps:
            - format:ts
            - format:sol

    lint:ts:
        desc: Lint TypeScript files
        cmd: bunx eslint .

    lint:ts:fix:
        desc: Lint and fix TypeScript files
        cmd: bunx eslint . --fix

    lint:ts:check:
        desc: Lint check only
        cmd: bunx prettier --check .

    lint:sol:
        desc: Lint Solidity files
        cmd: forge lint

    lint:
        desc: Lint all sources (Solidity and TypeScript)
        deps:
            - lint:ts
            - lint:sol

    build:sol:
        desc: Compile smart contracts using both Foundry and Hardhat. Accepts CLI args for `forge compile`
        aliases:
            - build
            - compile
        sources:
            - src/contracts/**/*.sol
            - test/foundry/**/*.sol
        generates:
            - cache/**/*
            - artifacts/**/*
        cmds:
            - task deps
            - forge compile {{.CLI_ARGS}}
            - bunx hardhat compile

    flatten:hardhat:
        desc: Flatten given Solidity source code(s) using Hardhat. Check `task --summary flatten:hardhat` for more info on the usage
        summary: |
            Flatten given Solidity source code(s) using `hardhat flatten`.
            You must supply the input file(s) using task CLI args.

            If no output option is passed, flattened file will be printed in STDOUT.
            Use --output [file] to put contents into a file.

            Example:
                `task flatten:hardhat -- src/contracts/Airdrop.sol` - Prints the flattened contents in STDOUT
                `task flatten:hh -- src/contracts/Airdrop.sol --output SC.sol` - Writes to SC.sol
        aliases:
            - flatten:hh
        cmds:
            - task deps
            - bunx hardhat flatten {{.CLI_ARGS}}

    flatten:forge:
        desc: Flatten given Solidity source code using Foundry. Check `task --summary flatten:forge` for more info on the usage
        summary: |
            Flatten given Solidity source code(s) using `forge flatten`.
            You must supply the input file(s) using task CLI args.

            If no output option is passed, flattened file will be printed in STDOUT.
            Use --output [file] to put contents into a file.

            Examples:
                `task flatten:forge -- src/contracts/Airdrop.sol` - Prints the flattened contents in STDOUT
                `task flatten -- src/contracts/Airdrop.sol --output SC.sol` - Writes to SC.sol
        aliases:
            - flatten:f
            - flatten
        cmds:
            - task build:sol
            - forge flatten {{.CLI_ARGS}}

