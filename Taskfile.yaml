version: "3.44"

dotenv:
    - .env

vars:
    SOLC_VERSION: v0.8.23

tasks:
    ensure-var:
        silent: true
        vars:
            PNAME: "{{index .CLI_ARGS_LIST 0}}"
            PVAL: "{{index .CLI_ARGS_LIST 1}}"
        cmd: '{{if eq (len .PVAL) 0}}echo ''Required arg "{{.PNAME}}" is not set'';exit 1{{else}}echo {{.PVAL}}{{end}}'

    deps:ts:
        desc: Install TypeScript dependencies
        aliases:
            - install:ts
        sources:
            - package.json
            - bun.lock
        cmd: bun install {{.CLI_ARGS}}

    deps:sol:
        desc: Install Solidity dependencies
        aliases:
            - install:sol
        sources:
            - .gitmodules
        generates:
            - lib/*/**/*
        cmd: forge install --shallow {{.CLI_ARGS}}

    deps:
        desc: Install all (Foundry/TS) dependencies
        aliases:
            - install
        deps:
            - deps:ts
            - deps:sol

    format:ts:
        desc: Run prettier formatter for TypeScript
        aliases:
            - fmt:ts
        cmd: bunx prettier --write .

    format:sol:
        desc: Run foundry formatter for Solidity
        aliases:
            - fmt:sol
        cmd: forge fmt

    format:
        desc: Format all sources (Solidity and TypeScript)
        aliases:
            - fmt
        deps:
            - format:ts
            - format:sol

    lint:ts:
        desc: Lint TypeScript files
        cmd: bunx eslint .

    lint:ts:fix:
        desc: Lint and fix TypeScript files
        cmd: bunx eslint . --fix

    lint:ts:check:
        desc: Lint check only
        cmd: bunx prettier --check .

    lint:sol:
        desc: Lint Solidity files
        cmd: forge lint

    lint:
        desc: Lint all sources (Solidity and TypeScript)
        deps:
            - lint:ts
            - lint:sol

    build:sol:
        desc: Compile smart contracts using both Foundry and Hardhat. Accepts CLI args for `forge compile`
        aliases:
            - build
            - compile
        sources:
            - src/contracts/**/*.sol
            - test/foundry/**/*.sol
        generates:
            - cache/**/*
            - artifacts/**/*
        cmds:
            - task deps
            - forge compile {{.CLI_ARGS}}
            - bunx hardhat compile

    flatten:hardhat:
        desc: Flatten given Solidity source code(s) using Hardhat. Check `task --summary flatten:hardhat` for more info on the usage
        summary: |
            Flatten given Solidity source code(s) using `hardhat flatten`.
            You must supply the input file(s) using task CLI args.

            If no output option is passed, flattened file will be printed in STDOUT.
            Use --output [file] to put contents into a file.

            Example:
                `task flatten:hardhat -- src/contracts/Airdrop.sol` - Prints the flattened contents in STDOUT
                `task flatten:hh -- src/contracts/Airdrop.sol --output SC.sol` - Writes to SC.sol
        aliases:
            - flatten:hh
        cmds:
            - task deps
            - bunx hardhat flatten {{.CLI_ARGS}}

    flatten:forge:
        desc: Flatten given Solidity source code using Foundry. Check `task --summary flatten:forge` for more info on the usage
        summary: |
            Flatten given Solidity source code(s) using `forge flatten`.
            You must supply the input file(s) using task CLI args.

            If no output option is passed, flattened file will be printed in STDOUT.
            Use --output [file] to put contents into a file.

            Examples:
                `task flatten:forge -- src/contracts/Airdrop.sol` - Prints the flattened contents in STDOUT
                `task flatten -- src/contracts/Airdrop.sol --output SC.sol` - Writes to SC.sol
        aliases:
            - flatten:f
            - flatten
        cmds:
            - task build:sol
            - forge flatten {{.CLI_ARGS}}

    abi:forge:
        desc: Get contract ABI from Foundry artifacts. Pass contract name (without .sol or path) as CLI arg
        summary: |
            Get contract ABI from Foundry artifacts. Pass contract name (without .sol or path) as CLI arg

            Examples:
                `task abi -- Airdrop`
                `task abi -- Ownable`
        silent: true
        aliases:
            - abi:f
            - abi
        cmds:
            - task build:sol
            - task get-foundry-artifact -- {{.CLI_ARGS}} | bunx node-jq -r '.abi'

    bytecode:forge:
        desc: Get contract bytecode from Foundry artifacts. Pass contract name (without .sol or path) as CLI arg
        summary: |
            Get contract bytecode from Foundry artifacts. Pass contract name (without .sol or path) as CLI arg

            Examples:
                `task bytecode:forge -- Airdrop`
                `task bytecode -- Ownable`
        silent: true
        aliases:
            - bytecode
            - bytecode:f
        cmds:
            - task build:sol
            - task get-foundry-artifact -- {{.CLI_ARGS}} | bunx node-jq -r '.bytecode.object'

    abi:hardhat:
        desc: Get contract ABI from Hardhat artifacts. Pass contract path as CLI arg relative to remappings
        summary: |
            Get contract ABI from Hardhat artifacts. Pass contract path as CLI arg relative to remappings

            Examples:
                `task abi:hardhat -- src/contracts/Airdrop.sol`
                `task abi:hardhat -- openzeppelin/contracts/access/Ownable.sol`
        silent: true
        aliases:
            - abi:hh
        cmds:
            - task build:sol
            - task get-hardhat-artifact -- {{.CLI_ARGS}} | bunx node-jq -r '.abi'

    bytecode:hardhat:
        desc: Get contract bytecode from Hardhat artifacts. Pass contract path as CLI arg relative to remappings
        summary: |
            Get contract bytecode from Hardhat artifacts. Pass contract path as CLI arg relative to remappings

            Examples:
                `task bytecode:hardhat -- src/contracts/Airdrop.sol`
                `task bytecode:hh -- openzeppelin/contracts/access/Ownable.sol`
        silent: true
        aliases:
            - bytecode:hh
        cmds:
            - task build:sol
            - task get-hardhat-artifact -- {{.CLI_ARGS}} | bunx node-jq -r '.bytecode'

    get-foundry-artifact:
        silent: true
        vars:
            NAME: "{{.CLI_ARGS_LIST | first}}"
        cmd: cat "artifacts/foundry/{{.NAME}}.sol/{{.NAME}}.json"

    get-hardhat-artifact:
        silent: true
        vars:
            FILEPATH: "{{.CLI_ARGS_LIST | first}}"
        cmd: |
            NAME="$(basename "{{.FILEPATH}}" .sol)"
            cat "artifacts/hardhat/{{.FILEPATH}}/$NAME.json"

    test:forge:
        desc: Run Foundry unit tests. Accepts CLI args for `forge test`
        summary: |
            Run Foundry unit tests. Accepts CLI args for `forge test`

            Example:
                `task test -- --mc Airdrop` - Run tests only with "Airdrop" as their contract name
        aliases:
            - test
            - test:f
        cmds:
            - task build:sol
            - forge test --show-progress --summary --detailed --ffi {{ .CLI_ARGS }}

    test:hardhat:
        desc: Run Hardhat tests. Accepts CLI args for `hardhat test`
        summary: |
            Run Hardhat tests. Accepts CLI args for `hardhat test`

            Examples:
                `task test:hardhat` - Run all hardhat tests at `test/hardhat`
                `task test:hardhat -- test/hardhat/AirdropIntegration.test.ts` - Run only the test at given path
        aliases:
            - test:hh
        cmds:
            - task build:sol
            - bunx hardhat test mocha {{ .CLI_ARGS }}

    test:bun:
        desc: Run bun tests, without hardhat or foundry loaded. Make sure to limit path to `test/ts`. Accepts CLI args for `bun test`
        deps:
            - deps:ts
        preconditions:
            - sh: test -n "{{ .CLI_ARGS }}"
              msg: "test:bun requires CLI args (e.g., 'test/ts' or a specific test file). Usage: task test:bun -- test/ts"
        cmd: bun test {{ .CLI_ARGS }}

    test:all:
        desc: Run all unit tests (Solidity and TypeScript)
        cmds:
            - task test:forge
            - task test:hardhat
            - task test:bun -- test/ts


    node:anvil:
        desc: Run an Anvil node locally
        cmd: anvil -b 13 --accounts 1 {{.CLI_ARGS}}

